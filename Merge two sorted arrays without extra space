PROBLEM & SOLUTION: https://www.youtube.com/watch?v=hVl2b3bLzBw&list=PLgUwDviBIf0rPG3Ictpu74YWBQ1CaBkm2&index=4


CODE:


__________________Method-1____________________

void Merge2SortedArrays(int arr1[], int arr2[]){
	int n = arr1.size();

	for(int i=0; i<n; i++){
		if(arr1[i] > arr2[0]){
			swap(arr1[i], arr[0]);
			sort(arr2.begin(), arr2.end());
		}
	}
}


___________________Method-2_____________________   TC = O(m*n)

void Merge2SortedArrays(int arr1[], int arr2[]){
	int n = arr1.size(), m = arr2.size();

	for(int i=0; i<n; i++){
		if(arr1[i] > arr2[0]){
			swap(arr1[i], arr[0]);
			
			if(arr2[0] > arr2[1]){
				int j=1;
				while(arr2[0] > arr2[j])
					j++;
				
				int temp = arr2[0], k=0;
				while(j>1){
					arr2[k] = arr2[k+1];
					j--;
					k++;
				}
				arr[k] = temp;
			}
		}
	}
}



________________Method-3____________________TC = O(m log(m) + n log(n)) = O(m+n log(m+n))

void Merge2SortedArrays(int arr1[], int arr2[]){
	
	int i = 0, j = 0, k = arr1.size()-1;

	while(i<=k && j<arr2.size()){
		if(arr1[i] < arr2[j]) 
			i++;
		else{
			swap(arr2[j], arr1[k]);
			k--;
			j++;
		}
	}

	sort(arr1.begin(), arr1.end());
	sort(arr2.begin(), arr2.end());
}



__________________Method-4____________________ (GAP Method)

Give an idea about it via image that i pasted it in Readme file of this repo.






