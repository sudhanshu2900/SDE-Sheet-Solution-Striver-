int LPS(string s){          //Longest Palindromic substring
        string str = s;
        reverse(str.begin(), str.end());
        int n = s.length(), m = str.length();
        
        int t[n+1][m+1];
        memset(t, 0, sizeof(t));
        
        for(int i=0; i<=n; i++){
            for(int j=0; j<=m; j++){
                
                if(i==0 || j==0) t[i][j]=0;
                else if(s[i-1] == str[j-1]) t[i][j] = 1+t[i-1][j-1];
                else t[i][j] = max(t[i-1][j], t[i][j-1]);
            }
        }
        return t[n][m];
    }
    
    int minInsertions(string s) {
        int n = s.length();
        return s.length()-LPS(s);    
    }
    
    
    
    
    
