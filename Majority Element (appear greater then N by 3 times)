PROBLEM & SOLUTION: https://www.youtube.com/watch?v=yDbkQd9t2ig&list=PLgUwDviBIf0rPG3Ictpu74YWBQ1CaBkm2&index=16


CODE:


____________________Method-1______________________                TC - O(N^2),  SC - O(1)

int majorityElementNby3(vector<int> arr, int n){
	int major;
	for(int i=0; i<n; i++){
		major = 1;
		for(int j=i+1; j<n; j++){
			if(arr[i] == arr[j]) major++;
		}
		if(major > n/3) return arr[i];
	}
	return -1;
}




___________________Method-2______________________                TC - O(N) or O(N log(N)),  SC - O(N)

int majorityElementNby3(vector<int> arr, int n){
	unordered_map<int, int> frequency;
	for(int i: arr)
		frequency[arr[i]]++;

	for(auto i=frequency.begin(); i!=frequency.end(); i++){
		if(i->second > n/3) return i->first;
	}

	return -1;
}



___________________Method-3________________________                 TC - O(N),   SC - O(1)

int majorityElementNby3(vector<int> arr, int n){
	int count1 = 0, count2 = 0, element1, element2;
	
	for(int i=0; i<n; i++){
		if(count1 == 0){
			element1 = arr[i];
			count1++;
		}
		else if(count2 == 0){
			element2 = arr[i];
			count2++;
		}
		else if(arr[i] == element1) count1++;

		else if(arr[i] == element2)count2++;
		
		else{
			count1--;
			count2--;
		} 
	}

	count1 = 0;
	count2 = 0;

	for(int i=0; i<n; i++){
		if(arr[i] == element1) count1++;
		else if(arr[i] == element2) count2++;
	}

	if(count1 > n/3) return element1;
	if(count2 > n/3) return element2;

	return -1;
}



