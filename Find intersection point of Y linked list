__________________________Method 1____________________________


ListNode *intersectionPoint(ListNode *head1, ListNode *head2){
	ListNode *trav1 = head1, *trav2 = head2;

	while(trav1 != NULL){
		while(trav2 != NULL){
			if(trav1 == trav2){
				return trav1;
			}
			trav2 = trav2->next;
		}
		trav1 = trav1->next;
	}
}


____________________________Method 2__________________________


ListNode *intersectionPoint(ListNode *head1, ListNode *head2){
	ListNode *trav1 = head1, *trav2 = head2;
	int len1 = 0, len2 = 0;

	while(trav1 != NULL){
		len1++;
		trav1 = trav1->next;
	}
	while(trav2 != NULL){
		len2++;
		trav2 = trav2->next;
	}

	int diffLen = abs(len1-len2);
	ListNode *temp = NULL;

	if(len1 > len2){
		temp = head1;
		for(int i=0; i<diffLen; i++)
			temp = temp->next;

		while(temp != NULL && head2 != NULL){
			if(head2 == temp) return temp;
			temp = temp->next;
			head2 = head2->next;
		}
	}
	else{
		temp = head2;
		for(int i=0; i<diffLen; i++)
			temp = temp->next;

		while(temp != NULL && head1 != NULL){
			if(head1 == temp) return temp;
			temp = temp->next;
			head1 = head1->next;
		}
	}
}


_______________________Method 3______________________________


ListNode *intersectionPoint(ListNode *head1, ListNode *head2){
	if(head1 == NULL || head2 == NULL) return NULL;

	ListNode *trav1 = head1, *trav2 = head2;

	while(trav1 != trav2){
		trav1 = (trav1 == NULL) ? head2 : trav1->next;
		trav2 = (trav2 == NULL) ? head1 : trav2->next;
	}
	return trav1;
}





